#
# Copyright 2014, NICTA
#
# This software may be distributed and modified according to the terms of
# the BSD 2-Clause license. Note that NO WARRANTY is provided.
# See "LICENSE_BSD2.txt" for details.
#
# @TAG(NICTA_BSD)
#

This directory contains the "autocorres" project.

The goal of this project is to automatically produce refinement proofs between
the output of the c-parser ("Simpl") to a monadic spec.

For example, the deeply-embedded Simpl function:

    schedule_body ==
    TRY
      action_' :== arbitrary;;
      action_' :== ptr_val ksSchedulerAction_';;
      IF action_' = ptr_val (tcb_Ptr (scast (~~ 0))) THEN
        CALL chooseThread_'proc();;
        globals_' :== ksSchedulerAction_'_update (%_. tcb_Ptr (scast 0))
      ELSE
        IF action_' ~= ptr_val (tcb_Ptr (scast 0)) THEN
          CALL switchToThread_'proc(ksSchedulerAction_');;
          globals_' :== ksSchedulerAction_'_update (%_. tcb_Ptr (scast 0))
        FI
      FI
    CATCH SKIP
    END

Could be translated into the monadic specification:

    schedule ==
      do
        action <- global ksSchedulerAction;
        case action of
            None => do
                chooseThread;
                set_global ksSchedulerAction None
              od
          | Some x => do
                switchToThread x;
                set_global ksSchedulerAction None
              od
      od


The result would be the input Simpl specification (the executes on state space
"A"); the output monadic specification (that executes on a different state
space "B"); and a proof of refinement between the two.

Some parts of this translation would occur automatically (such as removal of
local variables from the state record). Other parts will need source code
directives, such as type conversions between the two specifications.

